name: Публикация в PyPI

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      ref:
        description: 'Ветка или тег для сборки'
        required: false
        default: 'main'
      version:
        description: 'Версия релиза (оставьте пустым для автоопределения)'
        required: false

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      valid: ${{ steps.validate_version.outputs.valid }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || 'main' }}
          fetch-depth: 0

      - name: Определение версии
        id: set_version
        run: |
          # Для ручного запуска: используем введенную версию или определяем из файла
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=$(grep -E '^VERSION\s*=\s*"' TelegramTextApp/handler.py | cut -d '"' -f2)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Валидация версии
        id: validate_version
        run: |
          if [ -z "${{ steps.set_version.outputs.version }}" ]; then
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "::error::Версия не может быть пустой!"
            exit 1
          else
            echo "valid=true" >> $GITHUB_OUTPUT
          fi

  create-tag:
    runs-on: ubuntu-latest
    needs: get-version
    if: ${{ needs.get-version.outputs.valid == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.ref || 'main' }}
          fetch-depth: 0

      - name: Проверка существования тега
        id: check_tag
        run: |
          if git rev-parse -q --verify "refs/tags/${{ needs.get-version.outputs.version }}"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Создание тега
        if: ${{ steps.check_tag.outputs.tag_exists != 'true' }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a "${{ needs.get-version.outputs.version }}" -m "Version ${{ needs.get-version.outputs.version }}"
          git push origin "${{ needs.get-version.outputs.version }}"

  publish:
    runs-on: ubuntu-latest
    needs: [get-version, create-tag]
    if: ${{ needs.get-version.outputs.valid == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.get-version.outputs.version }}

      - name: Настройка Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Установка зависимостей
        run: pip install build

      - name: Сборка пакета
        run: python -m build

      - name: Публикация в PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}