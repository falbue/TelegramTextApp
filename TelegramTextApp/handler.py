VERSION="0.6.3"
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import asyncio
import uuid

from .setup_menu import *
from . import update_bot


def start(token, json_file, database, debug=False):
    logger = setup_logging(debug)
    logger.debug("–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")

    TOKEN = os.getenv("BOT_TOKEN")
    logger.debug("–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")

    config_db(database, debug)
    asyncio.run(create_tables())
    logger.debug("–ë–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

    utils_config(debug)
    logger.debug("–£—Ç–∏–ª–∏—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

    config_json(json_file, debug, get_caller_file_path())
    logger.debug("–ë–æ—Ç –ø–æ–ª—É—á–µ–Ω")

    asyncio.run(update_bot.update_bot_info(token, load_bot(), debug))
    
    bot = Bot(token=token, default=DefaultBotProperties(parse_mode="MarkdownV2"))
    dp = Dispatcher()
    
    class Form(StatesGroup):
        waiting_for_input = State()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    @dp.message(lambda message: message.text and message.text.startswith('/'))
    async def start_command(message: types.Message, state: FSMContext):
        await state.clear()
        user_id = message.chat.id
        try: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_id = await get_user(message, False)
            message_id = message_id["message_id"]
            if message.text == "/start":
                await bot.delete_message(chat_id=user_id, message_id=message_id)
        except:
            message_id = 0


        logger.debug(f"id: {user_id} | –ö–æ–º–∞–Ω–¥–∞: {message.text}")
        menu = await get_menu(message)
        
        if menu:
            try:
                await bot.edit_message_text(menu["text"], reply_markup=menu["keyboard"], chat_id=user_id, message_id=message_id)
            except Exception as e:
                if "message is not modified" in str(e) and message.text != "/start":
                    # –≠—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–∞ –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–∂–∏–¥–∞–µ–º
                    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (–∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã)")
                else:
                    # –≠—Ç–æ –∫–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}") 
                    await message.answer(menu["text"], reply_markup=menu["keyboard"])

        await message.delete()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    @dp.callback_query()
    async def handle_callback(callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        data = callback.data
        user_id = callback.message.chat.id
        logger.debug(f"id: {user_id} | –ö–Ω–æ–ø–∫–∞: {data}")
        
        if data.split("|")[0] == "mini":
            text = await get_mini_menu(callback)
            await callback.answer(text, show_alert=True)
            return
    
        if data == 'notification':
            await callback.message.delete()
            return
    
        menu = await get_menu(callback)
    
        if menu.get("input"):
            logger.debug("–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞...")
            await state.update_data(
                current_menu=menu,
                message_id=callback.message.message_id,
                callback=callback
            )
            await state.set_state(Form.waiting_for_input)
        
        await callback.message.edit_text(menu["text"], reply_markup=menu["keyboard"])

        if menu.get("loading"):
            menu = await get_menu(callback, menu_loading=True)
            await callback.message.edit_text(menu["text"], reply_markup=menu["keyboard"])
    
    
    @dp.message(Form.waiting_for_input)
    async def handle_text_input(message: types.Message, state: FSMContext):
        await message.delete()
    
        data = await state.get_data()
        menu = data.get("current_menu")
        callback = data.get('callback')
    
        input_data = menu['input']
        input_data['input_text'] = message.text
    
        menu = await get_menu(message, input_data)
        if not menu:
            logger.debug("–ü–æ–∫–∞ –Ω–∏–∫–∞–∫")
            return
    
        await state.clear()
        await callback.message.edit_text(menu["text"], reply_markup=menu["keyboard"])
    
    
    @dp.inline_query()
    async def inline_query_handler(inline_query: types.InlineQuery):
        logger.debug(f"inline: {inline_query}")

        def get_keyboard():
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ö–Ω–æ–ø–∫–∞",
                url="https://example.com"
            ))
            builder.add(types.InlineKeyboardButton(
                text="–î–µ–π—Å—Ç–≤–∏–µ",
                callback_data="action"
            ))
            return builder.as_markup()
        
        results = [
            # 1. –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (Article)
            types.InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                input_message_content=types.InputTextMessageContent(
                    message_text="<b>–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç</b> —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π",
                    parse_mode="HTML"
                ),
                description="–†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –º–∏–Ω–∏–∞—Ç—é—Ä–æ–π",
                thumb_url="https://via.placeholder.com/100",
                reply_markup=get_keyboard()
            ),
            
            # # 2. –§–æ—Ç–æ –ø–æ URL
            # types.InlineQueryResultPhoto(
            #     id=str(uuid.uuid4()),
            #     photo_url="https://picsum.photos/600/400",
            #     thumb_url="https://picsum.photos/100/100",
            #     title="üñº –§–æ—Ç–æ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞",
            #     description="–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ",
            #     caption="–§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é",
            #     reply_markup=get_keyboard()
            # ),
            
            # # 3. –í–∏–¥–µ–æ
            # types.InlineQueryResultVideo(
            #     id=str(uuid.uuid4()),
            #     video_url="https://example.com/sample.mp4",
            #     mime_type="video/mp4",
            #     thumb_url="https://via.placeholder.com/100",
            #     title="üé¨ –í–∏–¥–µ–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            #     description="–í–∏–¥–µ–æ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
            #     caption="–ü—Ä–∏–º–µ—Ä –≤–∏–¥–µ–æ"
            # ),
            
            # # 4. GIF-–∞–Ω–∏–º–∞—Ü–∏—è
            # types.InlineQueryResultGif(
            #     id=str(uuid.uuid4()),
            #     gif_url="https://media.giphy.com/media/3o7TKwxYkeW0ZvTqsU/giphy.gif",
            #     thumb_url="https://media.giphy.com/media/3o7TKwxYkeW0ZvTqsU/giphy.gif",
            #     title="üéû GIF-–∞–Ω–∏–º–∞—Ü–∏—è",
            #     caption="–ì–∏—Ñ–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é"
            # ),
            
            # # 5. –ê—É–¥–∏–æ —Ñ–∞–π–ª
            # types.InlineQueryResultAudio(
            #     id=str(uuid.uuid4()),
            #     audio_url="https://example.com/sample.mp3",
            #     title="üéµ –ê—É–¥–∏–æ —Ç—Ä–µ–∫",
            #     performer="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
            #     caption="–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞"
            # ),
            
            # # 6. –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # types.InlineQueryResultVoice(
            #     id=str(uuid.uuid4()),
            #     voice_url="https://example.com/voice.ogg",
            #     title="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            #     caption="Voice message"
            # ),
            
            # # 7. –î–æ–∫—É–º–µ–Ω—Ç (PDF –∏ –¥—Ä.)
            # types.InlineQueryResultDocument(
            #     id=str(uuid.uuid4()),
            #     document_url="https://example.com/document.pdf",
            #     mime_type="application/pdf",
            #     title="üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç",
            #     caption="–í–∞–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
            #     thumb_url="https://via.placeholder.com/100"
            # ),
            
            # 8. –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            types.InlineQueryResultLocation(
                id=str(uuid.uuid4()),
                latitude=55.755826,
                longitude=37.617300,
                title="üìç –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å",
                address="–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
                horizontal_accuracy=50
            ),
            
            # 9. –ö–æ–Ω—Ç–∞–∫—Ç
            types.InlineQueryResultContact(
                id=str(uuid.uuid4()),
                phone_number="+71234567890",
                first_name="–ò–≤–∞–Ω",
                last_name="–ò–≤–∞–Ω–æ–≤",
                thumb_url="https://via.placeholder.com/100"
            ),
            
            # # 10. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ (—Ç—Ä–µ–±—É–µ—Ç file_id)
            # types.InlineQueryResultCachedPhoto(
            #     id=str(uuid.uuid4()),
            #     photo_file_id="AgACAgIAAxkBAAIB...",  # –ó–∞–º–µ–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–º file_id
            #     caption="–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ",
            #     reply_markup=get_keyboard()
            # ),
            
            # # 11. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
            # types.InlineQueryResultCachedSticker(
            #     id=str(uuid.uuid4()),
            #     sticker_file_id="CAACAgIAAxkBAAIB..."  # –ó–∞–º–µ–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–º file_id
            # )
        ]
        await inline_query.answer(results)
    

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    async def main():
        await dp.start_polling(bot)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    asyncio.run(main())